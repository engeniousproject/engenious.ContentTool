<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

    <!-- Add EngeniousContentReference to item type selection in Visual Studio -->
    <ItemGroup>
        <AvailableItemName Include="EngeniousContentReference" />
        <CompilerVisibleItemMetadata Include="AdditionalFiles" MetadataName="SourceItemGroup" />
    </ItemGroup>

    <!-- This disables the IDE feature that skips executing msbuild in some build situations. -->
    <PropertyGroup>
        <EngeniousContentConfiguration Condition="'$(EngeniousContentConfiguration)'==''">$(Configuration)</EngeniousContentConfiguration>
    </PropertyGroup>
    <ItemGroup>
        <CompilerVisibleProperty Include="EngeniousContentConfiguration" />
        <CompilerVisibleProperty Include="EngeniousContentBuilderExe" />
        <CompilerVisibleProperty Include="EngeniousBuildParameters" />
        <CompilerVisibleProperty Include="EngeniousDotnetExe" />
    </ItemGroup>
    <Target Name="PrepareEngeniousContent" BeforeTargets="BeforeCompile">
        <!-- Get all Engenious Game Content References and store them in a list -->
        <ItemGroup>
            <ContentReferences Include="@(EngeniousContentReference)"/>
        </ItemGroup>
        <PropertyGroup>
            <ContentRootDirectory>Content</ContentRootDirectory>
        </PropertyGroup>
        <PropertyGroup Condition="'$(EngeniousContentConfiguration)' != ''">
            <ParentOutputDir>$(ProjectDir)$(ContentRootDirectory)\bin\$(EngeniousContentConfiguration)</ParentOutputDir>
            <ParentIntermediateDir>$(ProjectDir)$(ContentRootDirectory)\obj\$(EngeniousContentConfiguration)</ParentIntermediateDir>
        </PropertyGroup>
        <PropertyGroup>
            <EngeniousDotnetExe Condition="'$(DOTNET_HOST_PATH)' != ''">$(DOTNET_HOST_PATH)</EngeniousDotnetExe>
            <EngeniousDotnetExe Condition="'$(EngeniousDotnetExe)' == '' AND '$(DOTNET_ROOT)' != ''">$(DOTNET_ROOT)/dotnet</EngeniousDotnetExe>
            <EngeniousDotnetExe Condition="'$(EngeniousDotnetExe)' == ''">dotnet</EngeniousDotnetExe>

            <ContentRootDirectory>Content</ContentRootDirectory>


            <EngeniousContentBuilderExe Condition="'$(EngeniousContentBuilderExe)' == ''">$(MSBuildThisFileDirectory)..\tools\engenious.ContentTool.dll</EngeniousContentBuilderExe>

            <EngeniousProjectConfiguration>$(EngeniousContentConfiguration)</EngeniousProjectConfiguration>

            <EngeniousBuildParameters>/configuration:$(EngeniousContentConfiguration) /outputDir:&quot;$(ParentOutputDir)&quot; /intermediateDir:&quot;$(ParentIntermediateDir)&quot; /projectDir:&quot;$(ProjectDir)/&quot; /hidden:true</EngeniousBuildParameters>

        </PropertyGroup>

        <MakeDir Directories="$(ParentIntermediateDir)"/>
        <MakeDir Directories="$(ParentOutputDir)"/>
        <XmlPeek XmlInputPath="%(ContentReferences.FullPath)" Query="//Content/Configuration/text()" Condition="'$(EngeniousProjectConfiguration)'==''">
            <Output TaskParameter="Result" PropertyName="EngeniousProjectConfiguration" />
        </XmlPeek>
        <XmlPeek XmlInputPath="%(ContentReferences.FullPath)" Query="//Content/Name/text()">
            <Output TaskParameter="Result" PropertyName="EngeniousProjectName" />
        </XmlPeek>
        <ItemGroup>
            <AdditionalFiles Include="@(EngeniousContentReference)" SourceItemGroup="EngeniousContentReference" />
            <EngeniousObjFolders Include="%(ContentReferences.RootDir)%(ContentReferences.Directory)obj" />
            <AdditionalFiles Include="%(EngeniousObjFolders.Identity)/$(EngeniousProjectConfiguration)/$(EngeniousProjectName).CreatedCode.dat" SourceItemGroup="EngeniousContentData" />
        </ItemGroup>

    </Target>
    <Target Name="GetEngeniousContentDependencies" BeforeTargets="BeforeCompile" DependsOnTargets="PrepareEngeniousContent">
        <Exec ConsoleToMsBuild="true" Command="$(EngeniousDotnetExe) &quot;$(EngeniousContentBuilderExe)&quot; /@:&quot;%(ContentReferences.FullPath)&quot; $(EngeniousBuildParameters) /dependencyanalyse:true"
            WorkingDirectory="%(ContentReferences.RootDir)%(ContentReferences.Directory)" Condition="Exists('%(ContentReferences.FullPath)')" StandardErrorImportance="high" StandardOutputImportance="high">
            <Output TaskParameter="ConsoleOutput" ItemName="EngeniousContentDependencyAnalysis" />
        </Exec>

        <ItemGroup>
            <EngeniousContentItemInput Include="$([System.String]::new('%(EngeniousContentDependencyAnalysis.Identity)').Split('#')[0])" Condition="'@(EngeniousContentDependencyAnalysis)' != ''"/>
            <EngeniousContentItemOutput Include="$([System.String]::new('%(EngeniousContentDependencyAnalysis.Identity)').Split('#')[1])" Condition="'@(EngeniousContentDependencyAnalysis)' != ''"/>
            <AdditionalFiles Include="@(EngeniousContentItemInput)" SourceItemGroup="EngeniousContentInput" />
        </ItemGroup>
    </Target>
    <Target Name="BuildEngeniousContent" BeforeTargets="AfterBuild" DependsOnTargets="GetEngeniousContentDependencies">

        <ItemGroup>
            <ExtraContent Include="$(ParentOutputDir)\**\*.*" />
        </ItemGroup>
        <ItemGroup>
            <None Include="@(ExtraContent->'%(Identity)')" CopyToOutputDirectory="PreserveNewest" CopyToPublishDirectory="PreserveNewest" Visible="false" Link="$(ContentRootDirectory)\$([MSBuild]::MakeRelative($(ParentOutputDir), %(ExtraContent.Identity)))" />
        </ItemGroup>
    </Target>
    <Target Name="CleanEngeniousContent" BeforeTargets="BeforeClean;Clean" DependsOnTargets="PrepareEngeniousContent">
        <Exec Command="$(DotnetExe) &quot;$(EngeniousContentBuilderExe)&quot; /@:&quot;%(ContentReferences.FullPath)&quot; $(EngeniousBuildParameters) /clean"
            WorkingDirectory="%(ContentReferences.RootDir)%(ContentReferences.Directory)" Condition="Exists('%(ContentReferences.FullPath)')" />
    </Target>
    <Target Name="RebuildEngeniousContent" BeforeTargets="BeforeRebuild;Rebuild" DependsOnTargets="PrepareEngeniousContent">
        <Exec Command="$(DotnetExe) &quot;$(EngeniousContentBuilderExe)&quot; /@:&quot;%(ContentReferences.FullPath)&quot; $(EngeniousBuildParameters) /rebuild"
            WorkingDirectory="%(ContentReferences.RootDir)%(ContentReferences.Directory)" Condition="Exists('%(ContentReferences.FullPath)')" />
    </Target>
</Project>